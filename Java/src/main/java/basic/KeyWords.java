
//package keyword	Declares a Java package which is collection of classes
package basic;

/*
Extends keyword Indicates that a class is derived from another class or interface
 */
public class KeyWords extends A {

  void m() {
    System.out.println("2. abstract class A");
  }

  int e(){
    return 25*4;
  }

  public static void main(String[] args) {

    int aa = 4;

//    A data type that can hold unsigned 16-bit Unicode characters
    char bb = 'b';
    System.out.println("1. " + bb);


//    Abstract method Impl
    KeyWords a = new KeyWords();
    a.m();


//    Break keyword is used to break a loop, if its meets the condition then the loop breaks
    System.out.print("3. ");
    for (int c = 0; c <= 4; c++) {
      if (c == 3) {
        break;
      }
//    Indicates alternative branches in an if statement
      else if (c == 1) {
//    Continue keyword Sends control back outside a loop or skip the value
        continue;
      }
      System.out.print(c);
    }


    switch (aa) {
//    case keyword is Used in switch statements to mark blocks of text
      case 1:
        System.out.println("It's 1");
        break;
      case 4:
        System.out.println("\n" + "4. It's 4");
        break;
    }


//    Catches exceptions generated by try statements
    try {
      System.out.println(aa / 0);
    }
    catch (ArithmeticException e) {
      System.out.println("5. " + e);
    }


//    Starts a do-while loop
    System.out.print("6. ");
    do {
      System.out.print(aa);
      aa--;
    } while (aa > 0);



//    Starts a while loop
    System.out.print("\n7. ");
    while (aa < 5) {
      System.out.print(aa);
      aa++;
    }


//    double keyword is a data type that can hold 64-bit floating-point numbers
    double v = 234.234;
    System.out.println("\n8. " + v);


//    A data type that holds a 32-bit floating-point number
    float dd = 34.4f;
    System.out.println("9. " + dd);


//    boolean keyword is used to check the value that 'a' is instance of class 'A' or not
    boolean b = a instanceof A;
    System.out.println("10. " + b);

//    Final keyword Indicates that a variable holds a constant value or that a method will not be overridden
    final int cc = 54;

//    Enum keyword is used to declare an enumerated type. Enumerations extend the base class.
    Color c = Color.BLUE;
    System.out.println("11. " + c);


    try {
      System.out.println("12. This will throw compile time error as we are trying to change the final value of cc " +
        " System.out.println(\"11. \" +(cc++))");
    }
    catch (Exception e) {
      System.out.println("11. " + e);
    }
//    Finally keyword Indicates a block of code in a try-catch structure that will always be executed
    finally {
      System.out.println("13. This is the finally block It's always executes");
    }


//   For keyword is Used to start a for loop
    System.out.print("14. ");
    for (int i = 0; i < 5; i++) {
      System.out.print(i + ", ");
    }

    KeyWords k = new KeyWords();
    k.c();

    C useOfAccessSpecifiers = new C();
    System.out.println("16. protected d = " + useOfAccessSpecifiers.d + ", public e = " + useOfAccessSpecifiers.e +
      ", private c and static f is not accessible as it is private ");


//    Return keyword used to Sends control and possibly a return value back from a called method
    System.out.println("17. returning the value of method e = " + a.e());


  }

  @Override
  public void c() {
    System.out.println("\n15. keyword class extends of A and A implements of B so keyword implement methods of B ");
  }
}


/*
This is the use of Abstract keyword
This is an abstract class
It Specifies that a class or method will be implemented later, in a subclass
It only extends
 */
/*
class keyword is used to Declares a new class
 */
abstract class A implements B {

  /*
  Abstract Method
   */
  abstract void m();
}

// Declares an interface class
interface B {
  void c();
}

// Declares an enum class
enum Color {
  RED, GREEN, BLUE
}


class C {

  //  private is an access specifier indicating that a method or variable may be accessed only in the class it's
  //  declared in
  private int c = 45;

  //  protected	is an access specifier indicating that a method or variable may only be accessed in the class
  //  it's declared in (or a subclass of the class it's declared in or other classes in the same package)
  protected int d = 46;

  //  public is an access specifier used for classes, interfaces, methods,
  //  and variables indicating that an item is accessible throughout the application
  //  (or where the class that defines it is accessible)
  public int e = 47;

  //  static keyword Indicates that a variable or method is a class method (rather than being limited to one particular
  //  object)
  static int f = 48;


}